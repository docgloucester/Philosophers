Having an even number of philosophers allows the simulation to run undisturbed just by following its timing rules,
which are enough to make an alternance between odd philos and even philos and have the simulation run undisturbed.

Having an odd number of philosophers creates a dangling philo at each round, whom we want to eat as soon as possible
so that he doesn't die. Making him left-handed ensures he actually locks his only available fork at round N and its
second at round N+1, thus ensuring no philosopher is ever inbetween locking forks for more than 1 turn.
Refer to this viable scenario:

Eating strategy for 5 XXX 200 200 :
    0000ms: 1 3      are eating
    0200ms:  2  5    are eating
    0400ms: 1  4     are eating
    0600ms:   3 5    are eating
    0800ms:  2 4     are eating
    ... (repeating pattern)

0000 PHILO 1, 3, 5 START    // during 0-200ms, 1 2 3 4 5 are locked
0000 1 locks 1              // 1 and 3 are free to eat, 5 starts being left-handed
0000 1 locks 2
0000 1 eats
0000 3 locks 3
0000 3 locks 4
0000 3 eats
0000 5 locks 5

0200 PHILO 2, 4 START      // during 200-400ms, 5 1 2 3 4 are locked
0200 5 locks 1             // 5 continues being left-handed, 2 is free to eat, 4 starts being left-handed
0200 5 eats
0200 2 locks 3
0200 2 locks 2
0200 2 eats
0200 4 locks 4

                            // during 400-600ms, 4 5 1 2 3 are locked
0400 4 locks 5              // 4 continues being left-handed, 1 is free to eat, 3 starts being left-handed
0400 4 eats
0400 1 locks 2
0400 1 locks 1
0400 1 eats
0400 3 locks 3

                            // during 600-800ms, 3 4 5 1 2 are locked
0600 3 locks 4              // 3 continues being left handed, 5 is free to eat, 2 starts being left-handed
0600 3 eats
0600 5 locks 5
0600 5 locks 1
0600 5 eats
0600 2 locks 2

                            //during 800-1000ms, 2 3 4 5 1 are locked
0800 2 locks 3              // 2 continues being left-handed, 4 is free to eat, 1 starts being left-handed
0800 2 eats
0800 4 locks 4
0800 4 locks 5
0800 4 eats
0800 5 locks 5